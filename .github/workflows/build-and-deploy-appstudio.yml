# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# 💁 The Gitops App Studio Starter workflow will:
# - Checkout your repository
# - Perform a container image build
# - Push the built image to the GitHub Container Registry (GHCR)
# - Send an cpmponent update to App Studio 

name: Build-Appstudio-Gitops-Workflow 
env:
  # 🖊️ EDIT to change the image registry settings.
  # Registries such as GHCR, Quay.io, and Docker Hub are supported. 
  IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}
  IMAGE_REGISTRY_USER: ${{ github.actor }}
  IMAGE_REGISTRY_PASSWORD: ${{ github.token }}
  KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
  OIDC: ${{ secrets.OIDC }} 
  # 🖊️ EDIT to specify custom tags for the container image, or default tags will be generated below.
  IMAGE_TAGS: ""
  IMAGE_TAG: "" 
  CHECK_FOR_APP: "true"
  # 🖊️ EDIT to set a name for your OpenShift app, or a default one will be generated below.
  APP_NAME: "" 
on: 
  push:
    # Edit to the branch(es) you want to build and deploy on each push.
    branches: [ "main" ]  
  workflow_dispatch:
    branches: [ "main" ]  
jobs:
 github-actions-appstudio-bridge:
    name: Build and Update App Studio
    # ubuntu-20.04 can also be used.
    runs-on: ubuntu-20.04
    environment: production 
    steps:
    - name: Check for required secrets
      uses: actions/github-script@v6
      with:
        script: |
          const secrets = { 
            IMAGE_REGISTRY: `${{ env.IMAGE_REGISTRY }}`,
            IMAGE_REGISTRY_USER: `${{ env.IMAGE_REGISTRY_USER }}`,
            IMAGE_REGISTRY_PASSWORD: `${{ env.IMAGE_REGISTRY_PASSWORD }}`,
            KUBE_CONFIG: `${{ env.KUBE_CONFIG }}`,
            OIDC: `${{ env.OIDC }}`,
          }; 
          const missingSecrets = Object.entries(secrets).filter(([ name, value ]) => {
            if (value.length === 0) {
              core.error(`Secret "${name}" is not set`);
              return true;
            }
            core.info(`✔️ Secret "${name}" is set`);
            return false;
          });
          if (missingSecrets.length > 0) {
            core.setFailed(`❌ At least one required secret is not set in the repository. \n` +
              "You can add it using:\n" +
              "GitHub UI: https://docs.github.com/en/actions/reference/encrypted-secrets#creating-encrypted-secrets-for-a-repository \n" +
              "GitHub CLI: https://cli.github.com/manual/gh_secret_set \n" +
              "Also, refer to https://github.com/redhat-actions/oc-login#getting-started-with-the-action-or-see-example");
          }
          else {
            core.info(`✅ All the required secrets are set`);
          }
    - name: Check out repository
      uses: actions/checkout@v3
      with:
        fetch-depth: '2' 
    - name: Determine app name
      if: env.APP_NAME == ''
      run: |
        echo "APP_NAME=$(basename $PWD)" | tee -a $GITHUB_ENV
    - name: Determine image tags
      if: env.IMAGE_TAGS == ''
      run: |
        echo "IMAGE_TAGS=${GITHUB_SHA::12} latest " | tee -a $GITHUB_ENV
        echo "IMAGE_TAG=${GITHUB_SHA::12}" | tee -a $GITHUB_ENV   
    - name: Initialize App Studio Log Integration
      continue-on-error: true
      run: |  
        echo "Initialize App Studio Access"  
        wget -q https://github.com/int128/kubelogin/releases/download/v1.25.1/kubelogin_linux_amd64.zip
        unzip kubelogin_linux_amd64.zip kubelogin -d /usr/local/bin
        mv /usr/local/bin/kubelogin /usr/local/bin/kubectl-oidc_login
        KDIR=$HOME/.kube
        KCACHE=$KDIR/cache
        KUBECONFIG=$KDIR/config    
        mkdir -p $KDIR $KCACHE
        echo "${{ env.KUBE_CONFIG }}" | base64 -d > $KDIR/config 
        echo "${{ env.OIDC }}" | base64 -d > $KCACHE/oidc.tar   
        (cd $KCACHE; tar xvf oidc.tar) 
        kubectl config use-context appstudio 
        kubectl create secret generic token-secret --from-literal="token.txt=${{ secrets.MY_GITHUB_TOKEN }}" || true
        NAME=${{ env.APP_NAME }}-${{ env.IMAGE_TAG }}
        git clone https://github.com/jduimovich/bootstrap-actions-appstudio 
        INITIMAGE="${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_REGISTRY_USER }}/${{ env.APP_NAME }}:latest"
        echo "IMAGE IS $INITIMAGE " 
        (cd  bootstrap-actions-appstudio; bash update-app-component ${{ env.APP_NAME }} ${{ env.APP_NAME }} $INITIMAGE)
        yq bootstrap-actions-appstudio/output/pipelinerun.yaml | 
          yq e '.metadata.name = "'$NAME'"' |
          yq e '.spec.params[0].value = "'${{ github.actor }}'"' | 
          yq e '.spec.params[1].value = "'${{ env.APP_NAME }}'"' | 
          yq e '.spec.params[2].value = "'${{ github.run_id }}'"' |   
          kubectl apply -f - 
    - name: Build from Dockerfile 
      id: build-image
      uses: redhat-actions/buildah-build@v2
      with:
        image: ${{ env.APP_NAME }}
        tags: ${{ env.IMAGE_TAGS }} 
        # If you don't have a Dockerfile/Containerfile, refer to https://github.com/redhat-actions/buildah-build#scratch-build-inputs
        # Or, perform a source-to-image build using https://github.com/redhat-actions/s2i-build
        # Otherwise, point this to your Dockerfile/Containerfile relative to the repository root.
        dockerfiles: |
          ./Dockerfile
    # https://github.com/redhat-actions/push-to-registry#readme
    - name: Push to registry 
      id: push-image
      uses: redhat-actions/push-to-registry@v2
      with:
        image: ${{ steps.build-image.outputs.image }}
        tags: ${{ steps.build-image.outputs.tags }}
        registry: ${{ env.IMAGE_REGISTRY }}
        username: ${{ env.IMAGE_REGISTRY_USER }}
        password: ${{ env.IMAGE_REGISTRY_PASSWORD }}

    # The path the image was pushed to is now stored in ${{ steps.push-image.outputs.registry-path }}
    - name: Image
      run: |
        echo "IMAGE = ${{ steps.push-image.outputs.registry-path }}"  

    - name: Determine Skip App Check 
      run: |
        TEMP_FILE=temp_file
        echo "Commit message was: ${{ github.event.commits[0].message }}"
        echo "${{ github.event.commits[0].message }}"  > $TEMP_FILE 
        echo "Default check for app running first: $CHECK_FOR_APP"
        if grep "/no-check" $TEMP_FILE
        then  
            export CHECK_FOR_APP=false  
        fi
        if grep "/check" $TEMP_FILE
        then  
            export CHECK_FOR_APP=true  
        fi
        echo "CHECK_FOR_APP=${CHECK_FOR_APP}" | tee -a $GITHUB_ENV   
    - name: Ensure App Running
      if: env.CHECK_FOR_APP == 'true' 
      run: |
        if ! oc get application ${{ env.APP_NAME }}  &>/dev/null
        then
          oc apply -f bootstrap-actions-appstudio/output/app.yaml
          echo "Waiting for Application: ${{ env.APP_NAME }} to be ready."
          while :
          do
              STATUS=$(kubectl get application ${{ env.APP_NAME }} -o yaml | yq '.status.conditions[0].status') 
              if [ "$STATUS" == "True" ]
              then 
                  echo
                  break
              fi
              echo -n .
              sleep 1
          done 
        else 
          echo "application ${{ env.APP_NAME }} exists"
        fi
        if ! oc get component ${{ env.APP_NAME }}  &>/dev/null
        then 
          oc apply -f bootstrap-actions-appstudio/output/component.yaml
          echo "Waiting for Component: ${{ env.APP_NAME }} to be ready."
          while :
          do
              STATUS=$(kubectl get component ${{ env.APP_NAME }} -o yaml | yq '.status.conditions[0].status') 
              if [ "$STATUS" == "True" ]
              then 
                  echo
                  break
              fi
              echo -n .
              sleep 1
          done 
        else
          echo "component ${{ env.APP_NAME }} exists" 
        fi
    - name: Deploy new Image Component
      run: |    
        echo "Component: ${{ env.APP_NAME }} image updated to: ${{ steps.push-image.outputs.registry-path }}"
        NAME=${{ env.APP_NAME }}-${{ env.IMAGE_TAG }}
        oc annotate pipelinerun --overwrite=true $NAME build.appstudio.openshift.io/repo=${{ github.event.repository.name }}
        oc annotate pipelinerun --overwrite=true $NAME build.appstudio.openshift.io/image=${{ steps.push-image.outputs.registry-path }}
        oc get component ${{ env.APP_NAME }} -o yaml  | \
          yq  e '.spec.containerImage = "${{ steps.push-image.outputs.registry-path }}"' - | \
          yq  e '.spec.build.containerImage = "${{ steps.push-image.outputs.registry-path }}"' - | \
          oc apply -f -
    - name: App Studio Cleanup
      continue-on-error: true
      run: |     
        oc delete secret token-secret || true 
